#!/usr/bin/env bash
#################################################################
#           Waterfox Installation Script (wfxi)                 #
#################################################################
#
# Based on my archived script https://github.com/msmafra/waterfox-install/ created
# in 2019 and had its final update in 2023
# Author: Marcelo dos Santos Mafra
# License: GNU v3
# Created: 2023
# Update: 2023
#
# shellcheck disable=SC1001
VERSION="2.0.1"
LC_ALL=C
LANG=C

declare SCRIPT_TITLE
declare SCRIPT_FILE
declare SCRIPT_FOLDER
declare USER_LOCAL_BIN
declare LOGGED_USER
declare -a USAGE_ARRAY
declare WFX_LOCAL_BIN

SCRIPT_TITLE="# Waterfox Installation Script (wfxi)"
SCRIPT_FILE="$(\basename "${0}")"
SCRIPT_FOLDER="$(cd "$(\dirname "${BASH_SOURCE[0]}")" && \pwd)"
USER_LOCAL_BIN="${HOME}/.local/bin"
WFX_DESTINATION="/opt/waterfox"
LOGGED_USER="$(logname)"
COMPRESSED_EXT=".tar.bz2" # To account for a change or choice in compression algorithm e.g. .tar.gz, .tar.xz
USAGE_ARRAY=(
    "current"
    "desktop"
    "do"
    "get"
    "help"
    "need"
    "remove"
    "self"
    "usage"
    "version"
)
# checks if is root to not use sudo or doas
if [[ "${USER}" != root ]]; then
    # checks if doas is installed and use it as default
    [[ -f /usr/bin/doas ]] && PRIVUP="doas" || PRIVUP="sudo"
fi
WFX_LOCAL_BIN="/usr/local/bin"

main() {

    message white "${SCRIPT_TITLE}"
    super_user_check
    requirements

    if [[ ! "${1}" =~ ${USAGE_ARRAY[*]} ]]; then

        case "${1}" in
        current)
            wfxi_local "${@}"
            ;;
        desktop)
            wfxi_create_dot_desktop "${@}"
            ;;
        do)
            wfxi_do "${@}"
            ;;
        get)
            wfxi_get "${@}"
            ;;
        help)
            wfxi_help
            ;;
        need)
            requirements "${@}"
            ;;
        remove)
            wfxi_remove "${@}"
            ;;
        self)
            wfxi_self "${@}"
            ;;
        usage)
            wfxi_usage "${@}"
            ;;
        version)
            message recommend "${SCRIPT_FILE} version: ${VERSION}"
            ;;
        test)
            test "${@}"
            ;;
        *)
            wfxi_usage
            ;;
        esac
    else
        message warn "\"${1}\" unknown."
    fi

}
#######################################
# Checks if priviledges where elevated and exits if true
# Globals: LOGGED_USER
# Arguments: None
#######################################
super_user_check() {
    # log "Super user check"
    local user_id

    user_id="$(\id --user)"

    if [[ "${user_id}" -eq 0 ]]; then
        message fatal "${LOGGED_USER}, this script is not intended to be used with elevated privileges. Exiting."
        exit 1
    fi
}
#######################################
# Prints simple info log style for each function
# Globals: None
# Arguments: FUNCNAME
# Outputs: None
#######################################
log() {
    if [[ "${*}" = log ]]; then
        printf "(LOGGING) %s : *" "${FUNCNAME[1]:-unknown}"
    fi
}
#######################################
# Check if requirements are met and exits with error if not.
# Arguments: None
# Output: [string]
#   list with the missing executables
#######################################
requirements() {

    local -a req_execs
    local -i execs_found_counter
    local -a not_found

    execs_found_counter=0
    req_execs=(
        "curl"
        "grep"
        "rm"
        "sha512sum"
        "tar"
        "sed"
        "wget"
    )
    if [[ "${1}" = "need" ]]; then
        message info "${SCRIPT_FILE} requirements: ${req_execs[*]}"
    else
        for re in "${req_execs[@]}"; do
            if type -P "${re}" >/dev/null; then
                ((execs_found_counter += 1))
            else
                not_found+=("${re}")
            fi
        done

        if [[ "${execs_found_counter}" -ne "${#req_execs[@]}" ]]; then
            message info "Some requirements where not met. ${SCRIPT_FILE} needs:"
            for nf in "${not_found[@]}"; do
                message bullets "${nf}"
            done
            exit 1
        fi
    fi
}
#######################################
# Globals: SCRIPT_FILE, USAGE_ARRAY
# Arguments: $#
# Outputs: None
#######################################
wfxi_usage() {

    local args

    usage_string="$(for ua in "${USAGE_ARRAY[@]}"; do printf "%s | " "${ua}"; done)"
    args=$#

    if [[ "${1}" =~ ${USAGE_ARRAY[*]} ]]; then
        for ua in "${USAGE_ARRAY[@]}"; do
            if [[ "${ua}" =~ ${args} ]]; then
                printf "%s" "${ua}"
                break
            fi
        done
    else

        proton_get_usage="
Usage:
${SCRIPT_FILE} ${usage_string[*]}
"
    fi

    printf "%s\n" "${proton_get_usage}"
}
#######################################
# Globals: SCRIPT_TITLE, SCRIPT_FILE
# Arguments: None
# Outputs: Show help with each paramenter and a brief explanation of what it does/accepts
#######################################
wfxi_help() {

    local font_bold
    local font_normal

    font_bold=$(\tput bold)
    font_normal=$(\tput sgr0)

    proton_get_help="
Help:

  ${font_bold}current${font_normal}
        Checks if there is a newer version of ${SCRIPT_TITLE}.
  ${font_bold}desktop${font_normal}
        Generates the desktop file to /usr/share/applications or to a path of your choosing.
  ${font_bold}do${font_normal}
        Checksums waterfox downloaded file, installs/extracts it to /opt/waterfox, creates a symlink and a dot desktop file.
  ${font_bold}get${font_normal}
        get Downloads the latest or a specified version of Waterfox and its checksum file.
        Shows the file name with get file or shows the full url with get url
  ${font_bold}help${font_normal}
        Shows this help.
  ${font_bold}need${font_normal}
        Shows the list of dependencies for ${SCRIPT_FILE}.
  ${font_bold}remove${font_normal}
        Removes Waterfox from your system. Won't remove your configs and cache.
  ${font_bold}self${font_normal}
        Checks if there is a newer version of ${SCRIPT_FILE}. Auto installs if the running one is newer.
        Using the system parameter installs wfxi to /usr/local/bin.
  ${font_bold}usage${font_normal}
        Shows a quick list of commands to use this script.
  ${font_bold}version${font_normal}
        Shows the current ${SCRIPT_FILE} version.
"
    printf "%s" "${proton_get_help}"

}
#######################################
# Making color easier
# Arguments:
#   color[Int], msg[string]
# Outputs:
#######################################
colourize() {
    local -i cor
    cor="${1}"
    tput setaf "${cor}"
    printf "%b\n" "${2}"
    tput sgr0
}
#######################################
# Prints coloured messages for specific purposes
# Arguments:
#   message_type, msg
# Outputs:
#   Colored string message based on message_type input
# this was inspired by/based on Wimpy's World (Martin Wimpress) deb-get fancy_message function
#######################################
message() {
    # https://robotmoon.com/256-colors/
    # https://www.color-hex.com/color-names.html

    [ -z "${1}" ] || [ -z "${2}" ] && return

    local count_colours
    local message_type
    local msg
    local -i red
    local -i blue
    local -i green
    local -i white
    local -i grey
    local -i lightblue
    local -i purple
    local -i scarlet
    local -i orange
    local -i cyan

    count_colours="$(tput colors)"
    message_type="${1}"
    shift
    msg="${1}"

    if [[ "${count_colours}" == 256 ]]; then
        red="124"
        blue="21"
        green="46"
        white="255"
        grey="241"
        lightblue="33"
        purple="93"
        scarlet="160"
        yellow="226"
        orange="208"
        cyan="39"
    else
        red="1"
        blue="4"
        green="2"
        white="15"
        grey="8"
        lightblue="12"
        purple="5"
        scarlet="9"
        yellow="11"
        orange="${yellow}"
        cyan="14"
    fi

    case ${message_type} in
    error) colourize "${red}" "[e] ${msg}" | \tee >&2 ;;
    fatal) colourize "${scarlet}" "[f] ${msg}" | \tee >&2 ;;
    info) colourize "${lightblue}" "[i] ${msg}" ;;
    bullets) colourize "${cyan}" "    -> ${msg}" ;;
    progress) colourize "${white}" "[p] ${msg}" ;;
    recommend) colourize "${cyan}" "[r] ${msg}" ;;
    warn) colourize "${orange}" "[w] ${msg}" ;;
    purple) colourize "${purple}" "${msg}" ;;
    grey) colourize "${grey}" "${msg}" ;;
    green) colourize "${green}" "${msg}" ;;
    blue) colourize "${blue}" "${msg}" ;;
    white) colourize "${white}" "${msg}" ;;
    yellow) colourize "${yellow}" "${msg}" ;;
    *) printf "  - ? - %s - ? -\n" "${message_type}" ;;
    esac
}
#######################################
# Shows installed version number
# Globals: None
# Arguments: None
# Output: 0 or the current installed version number
#######################################
wfxi_local() {

    local wfx_local_version
    local wfx_binary

    wfx_binary="$(command -v waterfox)"
    if [[ -f $wfx_binary ]]; then
        wfx_local_version="$(${wfx_binary:-0} --version | cut -d" " -f3)"
    else
        wfx_local_version="0"
    fi

    if [[ "${1}" = "current" ]]; then
        message info "Watefox installed: ${wfx_local_version}"
    else
        printf "%s" "${wfx_local_version}" | sed --sandbox 's/[a-z.A-Z-]//g'
    fi

}
#######################################
# Copies wfxi to $HOME/.local/bin or /usr/local/bin
# Globals: VERSION, SCRIPT_FOLDER, SCRIPT_FILE, USER_LOCAL_BIN
# Arguments: None or system
# Output: None
#######################################
wfxi_self() {

    local regex_get_num
    local regex_num_pure
    local regex_tags
    local wfx_script_path
    local new_self
    local wfxi_destination
    local elevation
    local -a wfxi_destinations

    regex_get_num="[a-zA-Z-]"
    regex_num_pure="[a-zA-Z-.]"
    regex_tags="tags/v([0-9]{1,}.[0-9]{1,})"
    wfx_gitlab_tags_url="https://gitlab.com/msmafra/wfxi/-/tags"
    new_self="$(curl --silent ${wfx_gitlab_tags_url} | grep --extended-regex --only-matching --max-count=1 "${regex_tags}" | sed --sandbox 's/[\/]//g')"
    if [[ "${new_self//${regex_num_pure}/}" -gt "${VERSION//./}" ]]; then
        message recommend "Available: ${new_self//${regex_get_num}/}"
    else
        message grey "Available: ${new_self//${regex_get_num}/}"
    fi
    message grey "Installed: ${VERSION}"
    wfxi_destinations=(
        "${USER_LOCAL_BIN}"
        "${WFX_LOCAL_BIN}"
    )
    wfx_script_path="${SCRIPT_FOLDER}/${SCRIPT_FILE}"
    if [[ "${2}" = "system" ]]; then
        wfxi_destination="${wfxi_destinations[1]}"
        elevation="${PRIVUP}"
    else
        wfxi_destination="${wfxi_destinations[0]}"
        elevation=""
    fi

    case "${2}" in
    "remove")
        message warn "Self removing"
        for wd in "${wfxi_destinations[@]}"; do
            if [[ -f "${wd}/wfxi" ]]; then
                ${PRIVUP} rm --force --verbose "${wd}/wfxi"
            fi
        done

        message info "wfxi deleted."
        ;;
    *)
        if [[ ! -f "${wfxi_destination}/wfxi" ]] || [[ "${new_self//${regex_num_pure}/}" -gt "${VERSION//./}" ]]; then

            message progress "Installing ${wfxi_destination}/wfxi"
            ${elevation} install --verbose -D --compare --mode="740" --owner="${USER}" \
                --group="${USERNAME}" "${wfx_script_path}" \
                --target-directory="${wfxi_destination}"
            message info "wfxi installed."
        fi
        ;;
    esac

}

#######################################
# Downloads and checks the .tar.bz2 to $HOME/Downloads
# Also prints file name, URL and file version
# Next copies the resulting files to /opt/waterfox/
# Globals: COMPRESSED_EXT, $2
# Arguments: None, file, url or version
# Output: None
#######################################
wfxi_get() {

    local regex_url_filter
    local regex_file_filter
    local wfx_page_url
    local wfx_file_url
    local wfx_remote_file_status

    regex_url_filter="(http|https)://[a-zA-Z0-9./?=_-]*"
    regex_file_filter="[a-z]{1,}-G[0-9]{1,}.[0-9]{1,}.[0-9]{1,}.tar.bz2"
    wfx_page_url="https://www.waterfox.net/download"
    wfx_file_url="$(
        wget --quiet --output-document=- "${wfx_page_url}" |
            grep --extended-regexp --only-matching "${regex_url_filter}" |
            sort --unique |
            grep --max-count=1 "${COMPRESSED_EXT}"
    )"
    wfx_remote_file_status="$(
        wget --quiet --spider --server-response "${wfx_file_url}" 2>&1 |
            head --lines=1 |
            awk 'NR==1{print $2}'
    )"
    wfx_dowloaded_file="$(
        printf "%s" "${wfx_file_url}" |
            grep --extended-regexp --only-matching "${regex_file_filter}"
    )"
    wfx_dowloaded_file_path="${HOME}/Downloads/${wfx_dowloaded_file}"
    wfx_shasum_file="${HOME}/Downloads/${wfx_dowloaded_file}.sha512"
    if [[ ${*} =~ "nil" ]]; then
        internal_param="${1}"
    fi

    if [[ ! "${wfx_remote_file_status}" = "200" ]]; then
        message error "No remote file found! Leaving..."
        exit 1
    else
        case "${2}" in
        "url")
            printf "%s" "${wfx_file_url}"
            ;;
        "file")
            printf "%s" "${wfx_dowloaded_file}"
            ;;
        "version")
            printf "%s" "${wfx_dowloaded_file/$COMPRESSED_EXT/}" | sed --sandbox 's/[waterfox-]//g' # full version G6.0.3
            ;;
        *)

            # If the file is there, it starts the download
            message progress "Starting the download of ${wfx_file_url} and ${wfx_file_url}.sha512..."
            curl --silent --progress-bar --location --continue-at - "${wfx_file_url}" --output "${wfx_dowloaded_file_path}"
            curl --silent --progress-bar --location --continue-at - "${wfx_file_url}.sha512" --output "${wfx_shasum_file}"

            if [[ -f "${wfx_shasum_file}" ]]; then
                message progress "Checking integrity"
                if sha512sum --quiet --check "${wfx_dowloaded_file_path}"; then
                    message info "Integrity check OK"
                else
                    message error "File integrity not good. Delete it and try again."
                    message info "During tests, sometimes it happens, not sure why."
                    message info "Try manually running sha512sum --quiet --check ${wfx_dowloaded_file_path}"
                    # exit 1
                fi
            else
                message warn "File integrity not known, check sum file not found"
            fi
            ;;

        esac
    fi
}
#######################################
# Extracts the .tar.bz2 file to /tmp/ creating the subfolder named waterfox,
# next copies the resulting files to /opt/waterfox/
# Deletes /opt/waterfox and /usr/share/applications/waterfox.desktop
# Globals: WFX_DESTINATION, PRIVUP, $2
# Arguments: None or delete
# Output: None
#######################################
wfxi_do() {

    local wfx_file
    local wfx_file
    local wfx_local
    local -a wfx_install_files_list

    if [[ ! "${2}" = "delete" ]]; then
        wfx_file="$(wfxi_get nil file)"
        wfx_remote="$(wfxi_get nil version)" # full version G6.0.3
        wfx_local="$(wfxi_local)"
    fi
    wfx_install_files_list=(
        "${WFX_DESTINATION}"
        "/usr/share/applications/waterfox.desktop"
        "/usr/local/bin/waterfox"
    )

    case "${2}" in
    "delete")
        if [[ -d "${WFX_DESTINATION}" ]]; then

            message warn "Deleting: ${wfx_install_files_list[*]}"
            message info "Cache, favorites, configurations, and .desktop file to non standard path won't be deleted"

            for fl in "${wfx_install_files_list[@]}"; do
                "${PRIVUP}" rm --recursive --force --one-file-system "${fl}"
            done

            message info "deleted"

        else
            message info "Nothing to delete"

        fi
        ;;
    *)

        if [[ "${wfx_remote//[a-z.A-Z-]/}" -gt "${wfx_local}" ]]; then

            message info "Newer version available: ${wfx_remote}"

            if [[ -f "${HOME}/Downloads/${wfx_file}" ]]; then

                "${PRIVUP}" mkdir --parent --verbose "${WFX_DESTINATION}"

                message progress "Extracting ${HOME}/Downloads/${wfx_file} contents to ${WFX_DESTINATION}"
                "${PRIVUP}" tar --extract --file "${HOME}/Downloads/${wfx_file}" --directory="${WFX_DESTINATION}"

                message progress "Creating symbolic link"
                wfxi_symbolic_link

                message progress "Generating the desktop file"
                wfxi_create_dot_desktop

                message info "done"
            else

                message error "No file found"
                exit 1

            fi
        else
            message info "Already updated"
            exit 0
        fi
        ;;
    esac

}
#######################################
# Creates a symbolic link for the waterfox executable inside $HOME/.local/bin
# Globals: WFX_LOCAL_BIN, WFX_DESTINATION
# Arguments: None
# Output: None
#######################################
wfxi_symbolic_link() {

    # Creates the symbolic for the main executable on /usr/bin
    if [[ ! -f "${WFX_LOCAL_BIN}/waterfox" ]]; then
        message progress "Creating a symbolic link inside ${WFX_LOCAL_BIN}"
        ${PRIVUP} ln --symbolic --verbose --force "${WFX_DESTINATION}/waterfox" "${WFX_LOCAL_BIN}/waterfox"
    else
        message info "Waterfox symbolic link to the executable file is already there!"
    fi

}
#######################################
# Creates a desktop file to list Waterfox in the User Interface menus
# Globals: WFX_DESTINATION, $2
# Arguments: None or destination
# Output: None
#######################################
wfxi_create_dot_desktop() {

    local wfx_exec
    local wfx_desktop_exec
    local wfx_desktop_file_path
    local wfx_desktop_file_name
    local wfx_icon_path

    if [[ -d "${2}" ]]; then
        wfx_desktop_file_path="${2}"
    else
        wfx_desktop_file_path="/usr/share/applications"
    fi

    wfx_exec="${WFX_DESTINATION}/waterfox"
    wfx_desktop_exec="env MOZ_ENABLE_WAYLAND=1 ${wfx_exec} %u"
    wfx_desktop_file_name="${wfx_desktop_file_path}/waterfox.desktop"
    wfx_icon_path="${WFX_DESTINATION}/browser/chrome/icons/default/default256.png"

    message progress "Creating the ${wfx_desktop_file_name}..."
    ${PRIVUP} tee --ignore-interrupts "${wfx_desktop_file_name}" &>/dev/null <<WFOX
[Desktop Entry]
Version=1.0
Name=Waterfox
GenericName=Web Browser
GenericName[ar]=متصفح ويب
GenericName[ast]=Restolador Web
GenericName[bn]=ওয়েব ব্রাউজার
GenericName[ca]=Navegador web
GenericName[cs]=Webový prohlížeč
GenericName[da]=Webbrowser
GenericName[el]=Περιηγητής διαδικτύου
GenericName[es]=Navegador web
GenericName[et]=Veebibrauser
GenericName[fa]=مرورگر اینترنتی
GenericName[fi]=WWW-selain
GenericName[fr]=Navigateur Web
GenericName[gl]=Navegador Web
GenericName[he]=דפדפן אינטרנט
GenericName[hr]=Web preglednik
GenericName[hu]=Webböngésző
GenericName[it]=Browser web
GenericName[ja]=ウェブ・ブラウザ
GenericName[ko]=웹 브라우저
GenericName[ku]=Geroka torê
GenericName[lt]=Interneto naršyklė
GenericName[nb]=Nettleser
GenericName[nl]=Webbrowser
GenericName[nn]=Nettlesar
GenericName[no]=Nettleser
GenericName[pl]=Przeglądarka WWW
GenericName[pt]=Navegador Web
GenericName[pt_BR]=Navegador Web
GenericName[ro]=Navigator Internet
GenericName[ru]=Веб-браузер
GenericName[sk]=Internetový prehliadač
GenericName[sl]=Spletni brskalnik
GenericName[sv]=Webbläsare
GenericName[tr]=Web Tarayıcı
GenericName[ug]=توركۆرگۈ
GenericName[uk]=Веб-браузер
GenericName[vi]=Trình duyệt Web
GenericName[zh_CN]=网络浏览器
GenericName[zh_TW]=網路瀏覽器
Comment=Browse the World Wide Web
Comment[ar]=تصفح الشبكة العنكبوتية العالمية
Comment[ast]=Restola pela Rede
Comment[bn]=ইন্টারনেট ব্রাউজ করুন
Comment[ca]=Navegueu per la web
Comment[cs]=Prohlížení stránek World Wide Webu
Comment[da]=Surf på internettet
Comment[de]=Im Internet surfen
Comment[el]=Μπορείτε να περιηγηθείτε στο διαδίκτυο (Web)
Comment[es]=Navegue por la web
Comment[et]=Lehitse veebi
Comment[fa]=صفحات شبکه جهانی اینترنت را مرور نمایید
Comment[fi]=Selaa Internetin WWW-sivuja
Comment[fr]=Naviguer sur le Web
Comment[gl]=Navegar pola rede
Comment[he]=גלישה ברחבי האינטרנט
Comment[hr]=Pretražite web
Comment[hu]=A világháló böngészése
Comment[it]=Esplora il web
Comment[ja]=ウェブを閲覧します
Comment[ko]=웹을 돌아 다닙니다
Comment[ku]=Li torê bigere
Comment[lt]=Naršykite internete
Comment[nb]=Surf på nettet
Comment[nl]=Verken het internet
Comment[nn]=Surf på nettet
Comment[no]=Surf på nettet
Comment[pl]=Przeglądanie stron WWW
Comment[pt]=Navegue na Internet
Comment[pt_BR]=Navegue na Internet
Comment[ro]=Navigați pe Internet
Comment[ru]=Доступ в Интернет
Comment[sk]=Prehliadanie internetu
Comment[sl]=Brskajte po spletu
Comment[sv]=Surfa på webben
Comment[tr]=İnternet'te Gezinin
Comment[ug]=دۇنيادىكى توربەتلەرنى كۆرگىلى بولىدۇ
Comment[uk]=Перегляд сторінок Інтернету
Comment[vi]=Để duyệt các trang web
Comment[zh_CN]=浏览互联网
Comment[zh_TW]=瀏覽網際網路
Exec=${wfx_desktop_exec} %u
TryExec=${wfx_exec}
Terminal=false
Type=Application
Icon=${wfx_icon_path}
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;
StartupNotify=true
Actions=NewTab;NewWindow;NewPrivateWindow;NewInstance;SafeMode;KioskMode;Preferences;ProfileManager;

[Desktop Action NewTab]
Name=Open new tab
Name[ach]=Yab dirica matidi manyen
Name[af]=Open nuwe oortjie
Name[an]=Ubrir una pestanya nueva
Name[ar]=افتح لسانًا جديدًا
Name[as]=নতুন টেব খোলক
Name[ast]=Abrir llingüeta nueva
Name[az]=Yeni vərəq aç
Name[be]=Адкрыць новую ўстаўку
Name[bg]=Отваряне на нов подпрозорец
Name[bn_BD]=নতুন ট্যাব খুলুন
Name[bn_IN]=নতুন ট্যাব খুলুন
Name[br]=Digeriñ un ivinell nevez
Name[bs]=Otvori novi tab
Name[ca]=Obre una pestanya nova
Name[cs]=Otevřít nový panel
Name[cy]=Agor tab newydd
Name[da]=Åbn nyt faneblad
Name[de]=Neuen Tab öffnen
Name[dsb]=Nowy rejtark wócyniś
Name[el]=Άνοιγμα νέας καρτέλας
Name[eo]=Malfermi novan langeton
Name[es_AR]=Abrir nueva pestaña
Name[es_CL]=Abrir nueva pestaña
Name[es_ES]=Abrir pestaña nueva
Name[es_MX]=Abrir una pestaña nueva
Name[et]=Ava uus kaart
Name[eu]=Ireki fitxa berria
Name[ff]=Uddit tabbere hesere
Name[fi]=Avaa uusi välilehti
Name[fr]=Ouvrir un nouvel onglet
Name[fy_NL]=Iepenje nij ljepblêd
Name[ga_IE]=Oscail i gcluaisín nua
Name[gd]=Fosgail taba ùr
Name[gl]=Abrir unha nova lapela
Name[gu_IN]=નવી ટૅબને ખોલો
Name[he]=פתיחת לשונית חדשה
Name[hi_IN]=नया टैब खोलें
Name[hr]=Otvori novu karticu
Name[hsb]=Nowy rajtark wočinić
Name[hu]=Új lap megnyitása
Name[hy_AM]=Բացել նոր ներդիր
Name[id]=Buka tab baru
Name[is]=Opna nýjan flipa
Name[it]=Apri nuova scheda
Name[ja]=新しいタブ
Name[kk]=Жаңа бетті ашу
Name[kn]=ಹೊಸ ಹಾಳೆಯನ್ನು ತೆರೆ
Name[ko]=새 탭 열기
Name[lij]=Àrvi nêuvo féuggio
Name[lt]=Atverti naują kortelę
Name[mai]=नव टैब खोलू
Name[mk]=Отвори ново јазиче
Name[ml]=പുതിയ റ്റാബ് തുറക്കുക
Name[mr]=नवीन टॅब उघडा
Name[ms]=Buka tab baru
Name[nb_NO]=Åpne ny fane
Name[nl]=Nieuw tabblad openen
Name[nn_NO]=Opna ny fane
Name[or]=ନୂତନ ଟ୍ୟାବ ଖୋଲନ୍ତୁ
Name[pa_IN]=ਨਵੀਂ ਟੈਬ ਖੋਲ੍ਹੋ
Name[pl]=Otwórz nową kartę
Name[pt_BR]=Nova aba
Name[pt_PT]=Abrir novo separador
Name[rm]=Avrir in nov tab
Name[ro]=Deschide o filă nouă
Name[ru]=Открыть новую вкладку
Name[si]=නව ටැබය විවෘත කරන්න
Name[sk]=Otvoriť novú kartu
Name[sl]=Odpri nov zavihek
Name[son]=Nor loku taaga feeri
Name[sq]=Hap skedë të re
Name[sr]=Отвори нови језичак
Name[sv_SE]=Öppna ny flik
Name[ta]=புதிய கீற்றைத் திற
Name[te]=కొత్త టాబ్ తెరువుము
Name[th]=เปิดแท็บใหม่
Name[tr]=Yeni sekme aç
Name[uk]=Відкрити нову вкладку
Name[uz]=Yangi ichki oyna ochish
Name[vi]=Mở thẻ mới
Name[xh]=Vula ithebhu entsha
Name[zh_CN]=打开新标签页
Name[zh_TW]=開啟新分頁
Exec=${wfx_desktop_exec} --new-tab about:newtab

[Desktop Action NewWindow]
Name=Open new window
Name[ach]=Yab dirica manyen
Name[af]=Open nuwe venster
Name[an]=Ubrir una nueva finestra
Name[ar]=افتح نافذة جديدة
Name[as]=নতুন উইন্ডো খোলক
Name[ast]=Abrir ventana nueva
Name[az]=Yeni pəncərə aç
Name[be]=Адкрыць новае акно
Name[bg]=Отваряне на нов прозорец
Name[bn_BD]=নতুন উইন্ডো খুলুন
Name[bn_IN]=নতুন উইন্ডো খুলুন
Name[br]=Digeriñ ur prenestr nevez
Name[bs]=Otvori novi prozor
Name[ca]=Obre una finestra nova
Name[cs]=Otevřít nové okno
Name[cy]=Agor ffenestr newydd
Name[da]=Åbn nyt vindue
Name[de]=Neues Fenster öffnen
Name[dsb]=Nowe wokno wócyniś
Name[el]=Άνοιγμα νέου παραθύρου
Name[eo]=Malfermi novan fenestron
Name[es_AR]=Abrir nueva ventana
Name[es_CL]=Abrir nueva ventana
Name[es_ES]=Abrir nueva ventana
Name[es_MX]=Abrir nueva ventana
Name[et]=Ava uus aken
Name[eu]=Ireki leiho berria
Name[ff]=Uddit henorde hesere
Name[fi]=Avaa uusi ikkuna
Name[fr]=Ouvrir une nouvelle fenêtre
Name[fy_NL]=Iepenje nij finster
Name[ga_IE]=Oscail fuinneog nua
Name[gd]=Fosgail uinneag ùr
Name[gl]=Abrir unha nova xanela
Name[gu_IN]=નવી વિન્ડોને ખોલો
Name[he]=פתח חלון חדש
Name[hi_IN]=नई विंडो खोलें
Name[hr]=Otvori novi prozor
Name[hsb]=Nowe wokno wočinić
Name[hu]=Új ablak megnyitása
Name[hy_AM]=Բացել նոր պատուհան
Name[id]=Buka jendela baru
Name[is]=Opna nýjan glugga
Name[it]=Apri nuova finestra
Name[ja]=新しいウィンドウ
Name[kk]=Жаңа терезені ашу
Name[kn]=ಹೊಸ ವಿಂಡೊವನ್ನು ತೆರೆ
Name[ko]=새 창 열기
Name[lij]=Àrvi nêuvo barcón
Name[lt]=Atverti naują langą
Name[mai]=नई विंडो खोलू
Name[mk]=Отвори нов прозорец
Name[ml]=പുതിയ ജാലകം തുറക്കുക
Name[mr]=नवीन पटल उघडा
Name[ms]=Buka tetingkap baru
Name[nb_NO]=Åpne nytt vindu
Name[nl]=Een nieuw venster openen
Name[nn_NO]=Opna nytt vindauge
Name[or]=ନୂତନ ୱିଣ୍ଡୋ ଖୋଲନ୍ତୁ
Name[pa_IN]=ਨਵੀਂ ਵਿੰਡੋ ਖੋਲ੍ਹੋ
Name[pl]=Otwórz nowe okno
Name[pt_BR]=Nova janela
Name[pt_PT]=Abrir nova janela
Name[rm]=Avrir ina nova fanestra
Name[ro]=Deschide o nouă fereastră
Name[ru]=Открыть новое окно
Name[si]=නව කවුළුවක් විවෘත කරන්න
Name[sk]=Otvoriť nové okno
Name[sl]=Odpri novo okno
Name[son]=Zanfun taaga feeri
Name[sq]=Hap dritare të re
Name[sr]=Отвори нови прозор
Name[sv_SE]=Öppna nytt fönster
Name[ta]=புதிய சாளரத்தை திற
Name[te]=కొత్త విండో తెరువుము
Name[th]=เปิดหน้าต่างใหม่
Name[tr]=Yeni pencere aç
Name[uk]=Відкрити нове вікно
Name[uz]=Yangi oyna ochish
Name[vi]=Mở cửa sổ mới
Name[xh]=Vula iwindow entsha
Name[zh_CN]=打开新窗口
Name[zh_TW]=開啟新視窗
Exec=${wfx_desktop_exec} --new-window

[Desktop Action NewPrivateWindow]
Name=New private window
Name[ach]=Dirica manyen me mung
Name[af]=Nuwe privaatvenster
Name[an]=Nueva finestra de navegación privada
Name[ar]=نافذة خاصة جديدة
Name[as]=নতুন ব্যক্তিগত উইন্ডো
Name[ast]=Ventana privada nueva
Name[az]=Yeni məxfi pəncərə
Name[be]=Новае акно адасаблення
Name[bg]=Нов прозорец за поверително сърфиране
Name[bn_BD]=নতুন ব্যক্তিগত উইন্ডো
Name[bn_IN]=নতুন ব্যাক্তিগত উইন্ডো
Name[br]=Prenestr merdeiñ prevez nevez
Name[bs]=Novi privatni prozor
Name[ca]=Finestra privada nova
Name[cs]=Nové anonymní okno
Name[cy]=Ffenestr breifat newydd
Name[da]=Nyt privat vindue
Name[de]=Neues privates Fenster öffnen
Name[dsb]=Nowe priwatne wokno
Name[el]=Νέο παράθυρο ιδιωτικής περιήγησης
Name[eo]=Nova privata fenestro
Name[es_AR]=Nueva ventana privada
Name[es_CL]=Nueva ventana privada
Name[es_ES]=Nueva ventana privada
Name[es_MX]=Nueva ventana privada
Name[et]=Uus privaatne aken
Name[eu]=Leiho pribatu berria
Name[ff]=Henorde suturo hesere
Name[fi]=Uusi yksityinen ikkuna
Name[fr]=Nouvelle fenêtre de navigation privée
Name[fy_NL]=Nij priveefinster
Name[ga_IE]=Fuinneog nua phríobháideach
Name[gd]=Uinneag phrìobhaideach ùr
Name[gl]=Nova xanela privada
Name[gu_IN]=નવી ખાનગી વિન્ડો
Name[he]=חלון פרטי חדש
Name[hi_IN]=नया निजी विंडो
Name[hr]=Novi privatni prozor
Name[hsb]=Nowe priwatne wokno
Name[hu]=Új privát ablak
Name[hy_AM]=Գաղտնի դիտարկում
Name[id]=Jendela mode pribadi baru
Name[is]=Nýr einkagluggi
Name[it]=Nuova finestra anonima
Name[ja]=新しいプライベートウィンドウ
Name[kk]=Жаңа жекелік терезе
Name[kn]=ಹೊಸ ಖಾಸಗಿ ಕಿಟಕಿ
Name[ko]=새 사생활 보호 창
Name[lij]=Nêuvo barcón privòu
Name[lt]=Atverti privačiojo naršymo langą
Name[mai]=नव निज विंडो
Name[mk]=Нов прозорец за приватно сурфање
Name[ml]=പുതിയ സ്വകാര്യ ജാലകം
Name[mr]=नवीन वैयक्तिक पटल
Name[ms]=Tetingkap peribadi baharu
Name[nb_NO]=Nytt privat vindu
Name[nl]=Nieuw privévenster
Name[nn_NO]=Nytt privat vindauge
Name[or]=ନୂତନ ବ୍ୟକ୍ତିଗତ ୱିଣ୍ଡୋ
Name[pa_IN]=ਨਵੀਂ ਪ੍ਰਾਈਵੇਟ ਵਿੰਡੋ
Name[pl]=Nowe okno w trybie prywatnym
Name[pt_BR]=Nova janela privativa
Name[pt_PT]=Nova janela privada
Name[rm]=Nova fanestra privata
Name[ro]=Fereastră fără urme nouă
Name[ru]=Новое приватное окно
Name[si]=නව පුද්ගලික කවුළුව
Name[sk]=Nové okno v režime Súkromné prehliadanie
Name[sl]=Novo zasebno okno
Name[son]=Sutura zanfun taaga
Name[sq]=Dritare e re private
Name[sr]=Нови приватни прозор
Name[sv_SE]=Nytt privat fönster
Name[ta]=புதிய தனிப்பட்ட சாளரம்
Name[te]=కొత్త ఆంతరంగిక విండో
Name[th]=หน้าต่างท่องเว็บแบบส่วนตัวใหม่
Name[tr]=Yeni gizli pencere
Name[uk]=Нове приватне вікно
Name[uz]=Yangi shaxsiy oyna
Name[vi]=Cửa sổ riêng tư mới
Name[xh]=Ifestile yangasese entsha
Name[zh_CN]=新建隐私浏览窗口
Name[zh_TW]=新增隱私視窗
Exec=${wfx_desktop_exec} --private-window

[Desktop Action SafeMode]
Name=Safe Mode
Name[pt_BR]=Modo Securo
Exec=${wfx_desktop_exec} --safe-mode

[Desktop Action NewInstance]
Name=New Instance
Name[pt_BR]=Nova Instância
Exec=${wfx_desktop_exec} --new-instance

[Desktop Action KioskMode]
Name=Kiosk Mode
Name[pt_BR]=Modo Quiosque
Exec=${wfx_desktop_exec} --kiosk

[Desktop Action Preferences]
Name=Open Preferences dialog
Name[pt_BR]=Abre diálogo de Preferências
Exec=${wfx_desktop_exec} --preferences

[Desktop Action ProfileManager]
Name=Start with ProfileManager
Name[pt_BR]=Inicia com o Gerenciador de Perfis
Exec=${wfx_desktop_exec} --ProfileManager
WFOX

    if [[ -n "${2}" ]]; then
        message progress "Applying correct permissions to ${wfx_desktop_file_name}"
        ${PRIVUP} chown "${LOGGED_USER}": "${wfx_desktop_file_name}"
    fi

    message info "${wfx_desktop_file_name} created."
}
#######################################
# Runs everything
#######################################
main "${@}"
